//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "principals_public_keys")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub principal: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub fingerprint: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::principal::Entity",
        from = "Column::Principal",
        to = "super::principal::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Principal,
    #[sea_orm(
        belongs_to = "super::public_key::Entity",
        from = "Column::Fingerprint",
        to = "super::public_key::Column::Fingerprint",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PublicKey,
}

impl Related<super::principal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Principal.def()
    }
}

impl Related<super::public_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PublicKey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
