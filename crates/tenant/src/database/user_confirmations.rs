//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user_confirmations")]
pub struct Model {
    pub tenant: Uuid,
    #[sea_orm(primary_key, auto_increment = false, unique)]
    pub token: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub email: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::principal::Entity",
        from = "Column::Email",
        to = "super::principal::Column::Email",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Principal,
    #[sea_orm(
        belongs_to = "super::tenant::Entity",
        from = "Column::Tenant",
        to = "super::tenant::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Tenant,
}

impl Related<super::principal::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Principal.def()
    }
}

impl Related<super::tenant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tenant.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
