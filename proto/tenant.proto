syntax = "proto3";
package tenant;
import "google/protobuf/empty.proto";

service Tenant {
  // A small rpc to ping to make sure we are connected, but also
  // to help make a fast development function
  rpc Ping(PingMsg) returns (PongMsg);

  // Tenant Public API
  rpc ListTenants(ListTenantRequest) returns (ListTenantResponse);
  rpc GetTenant(GetTenantRequest) returns (TenantResponse);
  rpc CreateTenant(CreateTenantRequest) returns (StatusResponse);
  rpc DeleteTenant(DeleteTenantRequest) returns (StatusResponse);

  // Principal Public API
  rpc ListPrincipals(ListPrincipalRequest) returns (ListPrincipalResponse);
  rpc GetPrincipal(GetPrincipalRequest) returns (PrincipalResponse);
  rpc CreatePrincipal(CreatePrincipalRequest) returns (PrincipalResponse);
  rpc GetPrincipalAuth(GetPrincipalAuthRequest) returns (GetPrincipalAuthResponse);
  rpc RefreshToken(google.protobuf.Empty) returns (RefreshTokenResponse);
  rpc RevokeToken(RevokeTokenRequest) returns (StatusResponse);
  rpc AddPublicKeyToPrincipal(AddPublicKeyRequest) returns (StatusResponse);
  rpc RemovePublicKey(RemovePublicKeyRequest) returns (StatusResponse);
  rpc DeletePrincipal(DeletePrincipalRequest) returns (StatusResponse);
  rpc GetServerPublicKey(google.protobuf.Empty) returns (PublicKeyResponse);

  // Role Permissions API
  rpc DefineRole(DefineRoleRequest) returns (StatusResponse);
  rpc AddRole(RoleRequest) returns (StatusResponse);
  rpc RemoveRole(RoleRequest) returns (StatusResponse);

  // Principal Attributes API
  rpc AddAttribute(AttributeRequest) returns (StatusResponse);
  rpc RemoveAttribute(AttributeRequest) returns (StatusResponse);
}

message AttributeRequest {
  string principal = 1;
  string attribute = 2;
  optional string value = 3;
}

message DefineRoleRequest {
  string ident = 1;
  repeated string permissions = 2;
}

message RoleRequest {
  string ident = 1;
  string tenant = 2;
  string principal = 3;
}

message RevokeTokenRequest {
  string principal_name = 1;
  string tenant_id = 2;
}

message RefreshTokenResponse {
  string token = 1;
}

message GetPrincipalAuthResponse {
  bool encrypted = 1;
  string token = 2;
}

message GetPrincipalAuthRequest {  
  string principal_name = 1;
  string tenant_id = 2;
  bool encrypted = 3;
}

message DeletePrincipalRequest {
  string principal_name = 1;
  string tenant_id = 2;
}

message RemovePublicKeyRequest {
  string principal_name = 1;
  string tenant_id = 2;
  string fingerprint = 3;
}

message AddPublicKeyRequest {
  string principal_name = 1;
  string tenant_id = 2;
  string public_key = 3;
}

message CreatePrincipalRequest {
  string name = 1;
  string tenant_id = 2;
  optional string email = 3;
  repeated string public_keys = 4;
}

message DeleteTenantRequest {
  string id = 1;
}

message CreateTenantRequest {
  string id = 1;
  string name = 2;
  optional string parent = 3;
}

message StatusResponse {
  enum Status {
    OK = 0;
    ERROR = 1;
  }
  Status code = 1;
  optional string message = 2;
}

message PingMsg {
  // Who has pinged the server
  string sender = 1;
}

message PongMsg {
  enum Authenticated {
    NONE = 0;
    SUCESSFULL = 1;
    FAILED = 2;
  }
  Authenticated auth_status = 1;
  optional string message = 2;
}


message ListTenantRequest {
  // limit of amount of records to return
  uint64 limit = 1;
  // offeset after which entry to return results
  uint64 offset = 2;
  // filter to filter entities by
  TenantFilter filter = 3;
}

message ListPrincipalRequest {
  // limit of amount of records to return
  uint64 limit = 1;
  // offeset after which entry to return results
  uint64 offset = 2;
  // filter to filter entities by
  PrincipalFilter filter = 3;
}

message GetTenantRequest {
  // filter to filter entities by
  TenantFilter filter = 1;
}

message GetPrincipalRequest {
  // filter to filter entities by
  PrincipalFilter filter = 1;
}

message PrincipalFilter {
  // tenant (this is mandatory)
  string tenant_id = 1;
  oneof mail_or_name {
    string email = 2;
    string name = 3;
  }
}

message TenantFilter {
  // name of the tenant
  string name = 1;
}

message ListTenantResponse {
  repeated TenantResponse tenants = 1;
}

message ListPrincipalResponse {
  repeated PrincipalResponse principals = 1;
}

message PrincipalResponse {
  string id = 1;
  string name = 2;
  optional string email = 3;
  optional bool email_confirmed = 4;
}

message TenantResponse {
  string id = 1;
  string name = 2;
}

message PublicKeyResponse {
  repeated string public_key = 1;
}



